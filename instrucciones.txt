to raise the gekko server:
    node gekko --ui
to run the flask api:
    python / python3 2assets_MA.py

CONFIGURATION OF GEKKO SETTINGS FOR 2ASSETS_MA_PYTHON
Instruction:
    - the first run of the backtest type must be btc
    - the second run of the backtest must be specified the monde in type, example: type = 'eth'
    - this will look for the candles and matching dates and will show a short, long or nothing advice according to the strategy, percentage and periods in the settings
    - the MAdif is saved in a .scv file called MAdif.scv inside the static folder of the flask application
    - the advice, along with the candle, the date-time and the currency type (type) is stored in a csv file called advice.csv in the static folder
    ATTENTION: this was done to keep those data and be able to watch them at any time, in the same way each time the backtets are run, these files are rewritten.
#################
# percentage ####
#################
percentage = 0.12 -> percentage to do the calculation according to the periods
##################
# num of long periods #
##################
longperiod = 10 -> number of long periods to take
###################
# num of short periods #
###################
shortperiod = 5 -> number of short periods to take
########################################################
# signar [long, short, nothing] ##
########################################################
signal = 'long' -> this verifies what signal you want to throw (you could create a functionality that looks for a purchase advice stored and the tendency is to buy it or sell it, or a nothing where simply do the run and according to the stored and if there are matching dates indicate whether to buy or sell) currently this value is not in use, by default the api throws the advice of long or short and the coin type along with the matching candle
######################
# indicate type of trades #
######################
type = 'eth' -> the first run must be specified in btc, then the second backtest tells you the other type of currency so you can perform the strategy corresponding to the second backtest
#####################
# override <yes> or <no> #
#####################
override = 'yes' -> to overwrite the stored MAdif, if the answer is <no> it will use the last MAdif stored in the MAdif.csv file

#############
remove.py ###
#############
is a file that allows you to delete the historical data of the files where
the signals (MAdif.csv) and advices (advice.csv) are stored

############
##ESPAÑOL###
############
para levantar el server de gekko:
    node gekko --ui
para correr la api de flask:
    python/python3 2assets_MA.py

CONFIGURACION DEL SETTINGS DE GEKKO PARA 2ASSETS_MA_PYTHON
instruccions:
    - la primera corrida del backtest el type debe ser btc
    - la segunda corrida del backtest se debe especificar la monde en type, ejemplo: type='eth'
    - esto buscara las velas y fechas coincidentes y arrojara un advice de short, long o nada de acuerdo a la estrategia, porcentaje y periodos en el settings
    - el MAdif se guarda en un archivo .scv llamado MAdif.scv dentro de la carpeta static de la aplicacion flask
    - el advice, junto con la vela, la fecha-hora y el tipo moneda(type) es almacenado en un archivo csv  llamado advice.csv en la carpeta static
    ATENCION: esto se hiso para mantener esos datos y poder mirarlos en cualquier momento, de igual manera cada vez que se corren los backtets estos archivos son reescritos.
#################
# percentage ####
#################
percentage = 0.12  -> porcentaje para hacer el calculo de acuerdo a los periodos
######################
# num of long periods#
######################
longperiod = 10  -> numero de periodos largos a tomar
#######################
# num of short periods#
#######################
shortperiod = 5  -> numero de periodos cortos a tomar
#################################
# signar [long, short, nothing]##
################################# 
signal = 'long'  -> esto verifica que señal quieres que arroje(se podria crear una funcionalidad que busque si hay un consejo de compra almacenado y la tendencia es comprar que compre o si es de venta que venda, o un nothing donde simplemente haga la corrida y de acuerdo a lo almacenado y si hay fechas coincidentes indique si comprar o vender) actualmente este valor no esta en uso, por defecto la api arroja el consejo de long o short y el tipo de moneda junto con la vela coincidente
##########################
# indicate type of trades#
##########################
type = 'eth'  -> la primera corrida debe especificarse que es en btc, luego el segundo backtest se le indica el otro tipo de moneda para que asi pueda realizar la estrategia correspondiente al segundo backtest
#########################
# override <yes> or <no>#
#########################
override = 'yes'  -> para sobreescribir el MAdif almacenado, si la respuesta es <no> usará el último MAdif alamcenado en el archivo MAdif.csv

#############
remove.py ###
#############
es un archivo que permite eliminar la data historica de los archivos donde
se almacenan las señales(MAdif.csv) y advices(advice.csv) 